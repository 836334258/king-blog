const l=JSON.parse('{"key":"v-29ce5f79","path":"/code/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2.html","title":"一、JavaScript 基础","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"1、基本数据类型介绍","slug":"_1、基本数据类型介绍","link":"#_1、基本数据类型介绍","children":[{"level":3,"title":"1.1 Undefined 类型","slug":"_1-1-undefined-类型","link":"#_1-1-undefined-类型","children":[]},{"level":3,"title":"1.2 Null 类型","slug":"_1-2-null-类型","link":"#_1-2-null-类型","children":[]},{"level":3,"title":"1.3 Undefined 与 null 比较","slug":"_1-3-undefined-与-null-比较","link":"#_1-3-undefined-与-null-比较","children":[]},{"level":3,"title":"1.4 Boolean 类型","slug":"_1-4-boolean-类型","link":"#_1-4-boolean-类型","children":[]},{"level":3,"title":"1.5 Number 类型","slug":"_1-5-number-类型","link":"#_1-5-number-类型","children":[]},{"level":3,"title":"1.6 String 类型","slug":"_1-6-string-类型","link":"#_1-6-string-类型","children":[]}]},{"level":2,"title":"2、运算符","slug":"_2、运算符","link":"#_2、运算符","children":[{"level":3,"title":"2.1 等于运算符","slug":"_2-1-等于运算符","link":"#_2-1-等于运算符","children":[]},{"level":3,"title":"2.2 typeof 运算符","slug":"_2-2-typeof-运算符","link":"#_2-2-typeof-运算符","children":[]}]},{"level":2,"title":"3、常用的判空方法","slug":"_3、常用的判空方法","link":"#_3、常用的判空方法","children":[]},{"level":2,"title":"4、流程控制","slug":"_4、流程控制","link":"#_4、流程控制","children":[]},{"level":2,"title":"1、Object 类型","slug":"_1、object-类型","link":"#_1、object-类型","children":[{"level":3,"title":"1.1 new 操作符的作用","slug":"_1-1-new-操作符的作用","link":"#_1-1-new-操作符的作用","children":[]},{"level":3,"title":"1.2 原型对象理解","slug":"_1-2-原型对象理解","link":"#_1-2-原型对象理解","children":[]},{"level":3,"title":"1.3 原型属性","slug":"_1-3-原型属性","link":"#_1-3-原型属性","children":[]},{"level":3,"title":"1.4 Object.create( )方法","slug":"_1-4-object-create-方法","link":"#_1-4-object-create-方法","children":[]},{"level":3,"title":"1.5 Object.create( )与new Object()的区别","slug":"_1-5-object-create-与new-object-的区别","link":"#_1-5-object-create-与new-object-的区别","children":[]},{"level":3,"title":"1.6 模拟new操作符的实现","slug":"_1-6-模拟new操作符的实现","link":"#_1-6-模拟new操作符的实现","children":[]},{"level":3,"title":"1.7 原型链理解","slug":"_1-7-原型链理解","link":"#_1-7-原型链理解","children":[]},{"level":3,"title":"1.8 原型链特点","slug":"_1-8-原型链特点","link":"#_1-8-原型链特点","children":[]},{"level":3,"title":"1.9 属性的区分","slug":"_1-9-属性的区分","link":"#_1-9-属性的区分","children":[]}]},{"level":2,"title":"2、Array 类型","slug":"_2、array-类型","link":"#_2、array-类型","children":[{"level":3,"title":"2.1 怎样 判断一个变量是数组还是对象","slug":"_2-1-怎样-判断一个变量是数组还是对象","link":"#_2-1-怎样-判断一个变量是数组还是对象","children":[]},{"level":3,"title":"2.2 怎样过滤数组中满足条件的数据","slug":"_2-2-怎样过滤数组中满足条件的数据","link":"#_2-2-怎样过滤数组中满足条件的数据","children":[]},{"level":3,"title":"2.3 怎样对数组元素做累加处理","slug":"_2-3-怎样对数组元素做累加处理","link":"#_2-3-怎样对数组元素做累加处理","children":[]},{"level":3,"title":"2.4 怎样求数组中的最大值与最小值","slug":"_2-4-怎样求数组中的最大值与最小值","link":"#_2-4-怎样求数组中的最大值与最小值","children":[]},{"level":3,"title":"2.5 数组遍历的方式有哪些","slug":"_2-5-数组遍历的方式有哪些","link":"#_2-5-数组遍历的方式有哪些","children":[]},{"level":3,"title":"2.6 手动实现find方法","slug":"_2-6-手动实现find方法","link":"#_2-6-手动实现find方法","children":[]},{"level":3,"title":"2.7 手动实现 filter 方法","slug":"_2-7-手动实现-filter-方法","link":"#_2-7-手动实现-filter-方法","children":[]},{"level":3,"title":"2.8 手动实现 some 函数","slug":"_2-8-手动实现-some-函数","link":"#_2-8-手动实现-some-函数","children":[]},{"level":3,"title":"2.9 手动实现 every 函数","slug":"_2-9-手动实现-every-函数","link":"#_2-9-手动实现-every-函数","children":[]},{"level":3,"title":"2.10 手动实现 map 方法","slug":"_2-10-手动实现-map-方法","link":"#_2-10-手动实现-map-方法","children":[]},{"level":3,"title":"2.11 手动实现 reduce 方法","slug":"_2-11-手动实现-reduce-方法","link":"#_2-11-手动实现-reduce-方法","children":[]},{"level":3,"title":"2.12 怎样实现数组的去重","slug":"_2-12-怎样实现数组的去重","link":"#_2-12-怎样实现数组的去重","children":[]},{"level":3,"title":"2.13 怎样获取数组中最多的元素","slug":"_2-13-怎样获取数组中最多的元素","link":"#_2-13-怎样获取数组中最多的元素","children":[]}]},{"level":2,"title":"1、函数定义有哪几种实现方式","slug":"_1、函数定义有哪几种实现方式","link":"#_1、函数定义有哪几种实现方式","children":[]},{"level":2,"title":"2、Function( )构造函数定义函数的问题","slug":"_2、function-构造函数定义函数的问题","link":"#_2、function-构造函数定义函数的问题","children":[]},{"level":2,"title":"3、函数表达式的应用场景","slug":"_3、函数表达式的应用场景","link":"#_3、函数表达式的应用场景","children":[]},{"level":2,"title":"4、函数声明与函数表达式有什么区别","slug":"_4、函数声明与函数表达式有什么区别","link":"#_4、函数声明与函数表达式有什么区别","children":[]},{"level":2,"title":"5、函数常见的调用模式有哪些","slug":"_5、函数常见的调用模式有哪些","link":"#_5、函数常见的调用模式有哪些","children":[]},{"level":2,"title":"6、实参与形参有哪些区别","slug":"_6、实参与形参有哪些区别","link":"#_6、实参与形参有哪些区别","children":[]},{"level":2,"title":"7、介绍一下 arguments 对象","slug":"_7、介绍一下-arguments-对象","link":"#_7、介绍一下-arguments-对象","children":[]},{"level":2,"title":"8、arguments 对象有哪些应用场景","slug":"_8、arguments-对象有哪些应用场景","link":"#_8、arguments-对象有哪些应用场景","children":[]},{"level":2,"title":"9、说一下普通函数与构造函数的区别","slug":"_9、说一下普通函数与构造函数的区别","link":"#_9、说一下普通函数与构造函数的区别","children":[]},{"level":2,"title":"10、什么是变量提升，什么是函数提升","slug":"_10、什么是变量提升-什么是函数提升","link":"#_10、什么是变量提升-什么是函数提升","children":[{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"面试中关于作用域与作用域链的问题","slug":"面试中关于作用域与作用域链的问题","link":"#面试中关于作用域与作用域链的问题","children":[]},{"level":3,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":3,"title":"函数提升","slug":"函数提升","link":"#函数提升","children":[]}]},{"level":2,"title":"11、闭包","slug":"_11、闭包","link":"#_11、闭包","children":[{"level":3,"title":"执行上下文环境","slug":"执行上下文环境","link":"#执行上下文环境","children":[]},{"level":3,"title":"什么是闭包","slug":"什么是闭包","link":"#什么是闭包","children":[]},{"level":3,"title":"闭包的应用场景","slug":"闭包的应用场景","link":"#闭包的应用场景","children":[]},{"level":3,"title":"闭包常见面试题","slug":"闭包常见面试题","link":"#闭包常见面试题","children":[]},{"level":3,"title":"闭包优缺点","slug":"闭包优缺点","link":"#闭包优缺点","children":[]}]},{"level":2,"title":"12、this 指向","slug":"_12、this-指向","link":"#_12、this-指向","children":[{"level":3,"title":"常见面试题","slug":"常见面试题","link":"#常见面试题","children":[]}]},{"level":2,"title":"13、call()函数，apply( )函数，bind( )函数的使用与区别","slug":"_13、call-函数-apply-函数-bind-函数的使用与区别","link":"#_13、call-函数-apply-函数-bind-函数的使用与区别","children":[{"level":3,"title":"call( )函数的基本使用","slug":"call-函数的基本使用","link":"#call-函数的基本使用","children":[]},{"level":3,"title":"apply( )函数的基本使用","slug":"apply-函数的基本使用","link":"#apply-函数的基本使用","children":[]},{"level":3,"title":"bind函数的基本使用","slug":"bind函数的基本使用","link":"#bind函数的基本使用","children":[]},{"level":3,"title":"三个函数的比较","slug":"三个函数的比较","link":"#三个函数的比较","children":[]},{"level":3,"title":"应用场景","slug":"应用场景-1","link":"#应用场景-1","children":[]},{"level":3,"title":"手写 call、apply 及 bind 函数","slug":"手写-call、apply-及-bind-函数","link":"#手写-call、apply-及-bind-函数","children":[]}]},{"level":2,"title":"14、回调函数有什么缺点","slug":"_14、回调函数有什么缺点","link":"#_14、回调函数有什么缺点","children":[]},{"level":2,"title":"15、 为什么函数被称为一等公民？","slug":"_15、-为什么函数被称为一等公民","link":"#_15、-为什么函数被称为一等公民","children":[]},{"level":2,"title":"1、对象的属性","slug":"_1、对象的属性","link":"#_1、对象的属性","children":[]},{"level":2,"title":"2、属性访问方式的区别","slug":"_2、属性访问方式的区别","link":"#_2、属性访问方式的区别","children":[]},{"level":2,"title":"3、创建对象有哪几种方式","slug":"_3、创建对象有哪几种方式","link":"#_3、创建对象有哪几种方式","children":[]},{"level":2,"title":"4、对象拷贝","slug":"_4、对象拷贝","link":"#_4、对象拷贝","children":[{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}]},{"level":2,"title":"5、重写原型对象的问题","slug":"_5、重写原型对象的问题","link":"#_5、重写原型对象的问题","children":[]},{"level":2,"title":"6、继承的实现方式有哪些","slug":"_6、继承的实现方式有哪些","link":"#_6、继承的实现方式有哪些","children":[{"level":3,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":3,"title":"构造函数继承","slug":"构造函数继承","link":"#构造函数继承","children":[]},{"level":3,"title":"拷贝继承","slug":"拷贝继承","link":"#拷贝继承","children":[]},{"level":3,"title":"组合继承","slug":"组合继承","link":"#组合继承","children":[]},{"level":3,"title":"寄生式组合继承","slug":"寄生式组合继承","link":"#寄生式组合继承","children":[]}]},{"level":2,"title":"7、模拟 jQuery 实现","slug":"_7、模拟-jquery-实现","link":"#_7、模拟-jquery-实现","children":[]},{"level":2,"title":"**下面我们实现jQuery的扩展功能","slug":"下面我们实现jquery的扩展功能","link":"#下面我们实现jquery的扩展功能","children":[]},{"level":2,"title":"1、选择器","slug":"_1、选择器","link":"#_1、选择器","children":[]},{"level":2,"title":"2、HTMLCollection 对象与 NodeList 对象区别","slug":"_2、htmlcollection-对象与-nodelist-对象区别","link":"#_2、htmlcollection-对象与-nodelist-对象区别","children":[]},{"level":2,"title":"3、常见的 DOM 操作有哪些？","slug":"_3、常见的-dom-操作有哪些","link":"#_3、常见的-dom-操作有哪些","children":[]},{"level":2,"title":"4、DOM 性能问题","slug":"_4、dom-性能问题","link":"#_4、dom-性能问题","children":[]},{"level":2,"title":"5、什么是事件传播","slug":"_5、什么是事件传播","link":"#_5、什么是事件传播","children":[]},{"level":2,"title":"6、什么是事件的捕获","slug":"_6、什么是事件的捕获","link":"#_6、什么是事件的捕获","children":[]},{"level":2,"title":"7、什么是事件冒泡","slug":"_7、什么是事件冒泡","link":"#_7、什么是事件冒泡","children":[]},{"level":2,"title":"8、阻止事件冒泡","slug":"_8、阻止事件冒泡","link":"#_8、阻止事件冒泡","children":[]},{"level":2,"title":"9、事件冒泡与事件捕获问题","slug":"_9、事件冒泡与事件捕获问题","link":"#_9、事件冒泡与事件捕获问题","children":[]},{"level":2,"title":"10、Event 对象使用","slug":"_10、event-对象使用","link":"#_10、event-对象使用","children":[]},{"level":2,"title":"11、介绍一下三种事件模型","slug":"_11、介绍一下三种事件模型","link":"#_11、介绍一下三种事件模型","children":[]},{"level":2,"title":"12、介绍一下事件委托","slug":"_12、介绍一下事件委托","link":"#_12、介绍一下事件委托","children":[]},{"level":2,"title":"13、介绍一下浏览器的重排与重绘","slug":"_13、介绍一下浏览器的重排与重绘","link":"#_13、介绍一下浏览器的重排与重绘","children":[]},{"level":2,"title":"1、什么是 AJAX","slug":"_1、什么是-ajax","link":"#_1、什么是-ajax","children":[]},{"level":2,"title":"2、AJAX 原理是什么","slug":"_2、ajax-原理是什么","link":"#_2、ajax-原理是什么","children":[]},{"level":2,"title":"3、AJAX 基本的使用","slug":"_3、ajax-基本的使用","link":"#_3、ajax-基本的使用","children":[]},{"level":2,"title":"4、AJAX 优缺点分析","slug":"_4、ajax-优缺点分析","link":"#_4、ajax-优缺点分析","children":[]},{"level":2,"title":"5、Get 和 Post 请求数据的区别","slug":"_5、get-和-post-请求数据的区别","link":"#_5、get-和-post-请求数据的区别","children":[]},{"level":2,"title":"6、Get 和 Post 请求的应用场景","slug":"_6、get-和-post-请求的应用场景","link":"#_6、get-和-post-请求的应用场景","children":[]},{"level":2,"title":"7、浏览器同源策略","slug":"_7、浏览器同源策略","link":"#_7、浏览器同源策略","children":[]},{"level":2,"title":"8、为什么浏览器会有跨域限制的问题？","slug":"_8、为什么浏览器会有跨域限制的问题","link":"#_8、为什么浏览器会有跨域限制的问题","children":[]},{"level":2,"title":"9、跨域问题演示","slug":"_9、跨域问题演示","link":"#_9、跨域问题演示","children":[]},{"level":2,"title":"10、CORS","slug":"_10、cors","link":"#_10、cors","children":[]},{"level":2,"title":"11、JSONP","slug":"_11、jsonp","link":"#_11、jsonp","children":[]},{"level":2,"title":"1、let 关键字","slug":"_1、let-关键字","link":"#_1、let-关键字","children":[{"level":3,"title":"1.1 基本用法","slug":"_1-1-基本用法","link":"#_1-1-基本用法","children":[]},{"level":3,"title":"1.2 let 与 var 区别","slug":"_1-2-let-与-var-区别","link":"#_1-2-let-与-var-区别","children":[]},{"level":3,"title":"1.3 块级作用域","slug":"_1-3-块级作用域","link":"#_1-3-块级作用域","children":[]},{"level":3,"title":"1.4 let 命令注意事项","slug":"_1-4-let-命令注意事项","link":"#_1-4-let-命令注意事项","children":[]}]},{"level":2,"title":"2、const 命令","slug":"_2、const-命令","link":"#_2、const-命令","children":[{"level":3,"title":"2.1 基本用法","slug":"_2-1-基本用法","link":"#_2-1-基本用法","children":[]},{"level":3,"title":"2.2 const 命令注意事项","slug":"_2-2-const-命令注意事项","link":"#_2-2-const-命令注意事项","children":[]}]},{"level":2,"title":"3、解构赋值","slug":"_3、解构赋值","link":"#_3、解构赋值","children":[{"level":3,"title":"3.1、数组解构赋值基本用法","slug":"_3-1、数组解构赋值基本用法","link":"#_3-1、数组解构赋值基本用法","children":[]},{"level":3,"title":"3.2、注意事项","slug":"_3-2、注意事项","link":"#_3-2、注意事项","children":[]},{"level":3,"title":"3.4、对象解构赋值基本使用","slug":"_3-4、对象解构赋值基本使用","link":"#_3-4、对象解构赋值基本使用","children":[]},{"level":3,"title":"3.5、对象解构赋值注意事项","slug":"_3-5、对象解构赋值注意事项","link":"#_3-5、对象解构赋值注意事项","children":[]},{"level":3,"title":"3.6、字符串的解构赋值","slug":"_3-6、字符串的解构赋值","link":"#_3-6、字符串的解构赋值","children":[]},{"level":3,"title":"3.7、函数参数的解构赋值","slug":"_3-7、函数参数的解构赋值","link":"#_3-7、函数参数的解构赋值","children":[]},{"level":3,"title":"3.8、解构赋值的好处","slug":"_3-8、解构赋值的好处","link":"#_3-8、解构赋值的好处","children":[]}]},{"level":2,"title":"4、扩展运算符与rest运算符","slug":"_4、扩展运算符与rest运算符","link":"#_4、扩展运算符与rest运算符","children":[{"level":3,"title":"4.1 扩展运算符","slug":"_4-1-扩展运算符","link":"#_4-1-扩展运算符","children":[]},{"level":3,"title":"4.2 扩展运算符应用场景","slug":"_4-2-扩展运算符应用场景","link":"#_4-2-扩展运算符应用场景","children":[]},{"level":3,"title":"4.3 rest运算符","slug":"_4-3-rest运算符","link":"#_4-3-rest运算符","children":[]}]},{"level":2,"title":"5、什么是箭头函数","slug":"_5、什么是箭头函数","link":"#_5、什么是箭头函数","children":[{"level":3,"title":"5.1 箭头函数基本使用","slug":"_5-1-箭头函数基本使用","link":"#_5-1-箭头函数基本使用","children":[]},{"level":3,"title":"5.2 箭头函数注意事项","slug":"_5-2-箭头函数注意事项","link":"#_5-2-箭头函数注意事项","children":[]}]},{"level":2,"title":"6、对象的扩展","slug":"_6、对象的扩展","link":"#_6、对象的扩展","children":[{"level":3,"title":"1、属性与方法的简洁表示方式","slug":"_1、属性与方法的简洁表示方式","link":"#_1、属性与方法的简洁表示方式","children":[]},{"level":3,"title":"2、Object.assign( )方法","slug":"_2、object-assign-方法","link":"#_2、object-assign-方法","children":[]}]},{"level":2,"title":"7、Symbol","slug":"_7、symbol","link":"#_7、symbol","children":[{"level":3,"title":"7.1、Symbol 简介","slug":"_7-1、symbol-简介","link":"#_7-1、symbol-简介","children":[]},{"level":3,"title":"7.2、Symbol 应用场景","slug":"_7-2、symbol-应用场景","link":"#_7-2、symbol-应用场景","children":[]}]},{"level":2,"title":"8、Proxy","slug":"_8、proxy","link":"#_8、proxy","children":[{"level":3,"title":"1.Proxy 简介","slug":"_1-proxy-简介","link":"#_1-proxy-简介","children":[]},{"level":3,"title":"2、应用场景","slug":"_2、应用场景","link":"#_2、应用场景","children":[]}]},{"level":2,"title":"9、Set 结构","slug":"_9、set-结构","link":"#_9、set-结构","children":[{"level":3,"title":"1.1 常用的操作方法","slug":"_1-1-常用的操作方法","link":"#_1-1-常用的操作方法","children":[]}]}],"git":{"updatedTime":1661156798000,"contributors":[{"name":"king","email":"836334258@qq.com","commits":2}]},"filePathRelative":"code/JavaScript面试精讲.md"}');export{l as data};
